var parseString = require("xml2js").parseString;
var xml = "<root>Hello xml2js!</root>";
const response = "Body {
  url: 'https://www.goodreads.com/search/index.xml?key=rp6xJKzTai9n8FksSQqXqA&q=bible',
  status: 200,
  statusText: 'OK',
  headers:
   Headers {
     _headers:
      { server: [Array],
        date: [Array],
        'content-type': [Array],
        'transfer-encoding': [Array],
        connection: [Array],
        status: [Array],
        'x-frame-options': [Array],
        'x-xss-protection': [Array],
        'x-content-type-options': [Array],
        vary: [Array],
        'x-request-id': [Array],
        etag: [Array],
        'cache-control': [Array],
        'x-runtime': [Array],
        'content-encoding': [Array],
        'set-cookie': [Array] } },
  ok: true,
  body:
   Gunzip {
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: [Object],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: null,
        ended: false,
        endEmitted: false,
        reading: false,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     domain: null,
     _events:
      { end: [Array],
        prefinish: [Function: prefinish],
        unpipe: [Function: onunpipe],
        drain: [Function],
        error: [Function: onerror],
        close: [Object],
        finish: [Object] },
     _eventsCount: 7,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: true,
        defaultEncoding: 'utf8',
        length: 2664,
        writing: true,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: [Function: nop],
        writelen: 2664,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 1,
        prefinished: false,
        errorEmitted: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _transformState:
      { afterTransform: [Function: bound afterTransform],
        needTransform: false,
        transforming: true,
        writecb: [Function: bound onwrite],
        writechunk: <Buffer 1f 8b 08 00 00 00 00 00 00 03 ed 5c 5b 73 a3 38 1a 7d 9f 5f c1 e6 65 9f 62 90 10 20 75 b9 dd 95 be 64 fa be 3d 49 36 bd 53 53 53 29 d9 56 62 36 80 dc ... >,
        writeencoding: 'buffer' },
     bytesRead: 0,
     _opts: {},
     _chunkSize: 16384,
     _flushFlag: 0,
     _finishFlushFlag: 4,
     _handle:
      Zlib {
        onerror: [Function: bound zlibOnError],
        buffer: <Buffer 1f 8b 08 00 00 00 00 00 00 03 ed 5c 5b 73 a3 38 1a 7d 9f 5f c1 e6 65 9f 62 90 10 20 75 b9 dd 95 be 64 fa be 3d 49 36 bd 53 53 53 29 d9 56 62 36 80 dc ... >,
        callback: [Function: callback] },
     _hadError: false,
     _buffer: <Buffer 3c 3f 78 6d 6c 20 76 65 72 73 69 6f 6e 3d 22 31 2e 30 22 20 65 6e 63 6f 64 69 6e 67 3d 22 55 54 46 2d 38 22 3f 3e 0a 3c 47 6f 6f 64 72 65 61 64 73 52 ... >,
     _offset: 0,
     _level: -1,
     _strategy: 0 },
  bodyUsed: false,
  size: 0,
  timeout: 0,
  _raw: [],
  _abort: false }"
parseString(response, function(err, result) {
  // console.dir(result);
  console.log(result);
  // console.log(JSON.stringify(result));
});
